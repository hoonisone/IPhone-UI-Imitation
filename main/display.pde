class Display  extends Rect{
    
    public IPhone iphone;  // 핸드폰
    public final InformationBar informationBar;
    public final Content content;
    
    public boolean isTurnOn = false;
    public String situation = "turnOffScreen";
  
    public float progress1;  // to_turnOff용
    public float progress2;  // 나머지용
  
    public PImage wallpaper;
    public PImage wallpaper_scoured;
    
    public int pressedTime;
    public float pressedX;
    public float pressedY;
    
    public Display(IPhone iphone)  // 디스플레이 생성자
    {
        super(0,0,0,0);
        this.iphone = iphone;  // 핸드폰과 연결
        informationBar = new InformationBar(this);
        content = new Content(this);
        wallpaper = loadImage("beach.jpg");
        wallpaper_scoured = loadImage("beach.jpg");

        adjust();
    }
    
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////      set_menu     ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void set_x                (float x){this.x = x;}
    void set_y                (float y){this.y = y;}
    void set_w                (float w){this.w = w;}
    void set_h                (float h){this.h = h;}  
    void set_situation        (String situation){
        switch(situation)
        {
        case "to_turnOnScreen":
            progress2 = 255;
            break;
        case "to_keypadScreen":
            progress2 = 1;
            break;

        case "to_wallpaperScreen":
            progress2 = 151;
            break;
        }
        this.situation = situation;
    }
    
    public void set_isTurnOn(boolean isTurnOn){
        if(isTurnOn)
            progress1 = 0;
        else
            iphone.keypad.set_situation("solving");
            this.isTurnOn = isTurnOn;
    }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////      get_menu     ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    float get_x()              {return x;}
    float get_y()              {return y;}
    float get_w()              {return w;}
    float get_h()              {return h;}
    String get_situation()     {return situation;}
    public int get_pressedTime(){return millis()-pressedTime;}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////     operater      ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public void wallpaperController_mousePressed(){
        pressedX = mouseX;
        pressedY = mouseY;  
        pressedTime = millis();
        content.controller_mousePressed();
    }
    
    public void wallpaperController_mousePressing(){
        content.controller_mousePressing();
    }
    
    public void wallpaperController_mouseDragged(){
        if(isMouseOn()){
            if(!isPointOn(pressedX, pressedY)){
                pressedTime = millis();
                pressedX = mouseX;
                pressedY = mouseY;
            }
        }
        content.controller_mouseDragged();

    }
    
    public void wallpaperController_mouseReleased(){
        content.controller_mouseReleased();
    }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////       sketch      ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public void sketch_to_turnOffScreen(){  // 화면 끄기
        sketch_darkCover(progress1, 1);
        progress1 += 30;
        if(progress1 >= 255)
            set_situation("turnOffScreen");
    }
    
    public void sketch_turnOffScreen(){
        PALETTE.setting_pen(true, true, PALETTE.BLACK, PALETTE.BLACK, 1);
        rect(x, y, w, h);
    }
    
    public void sketch_to_turnOnScreen(){
        sketch_wallpaper("original");
        print_turnOnScreen_information();
        sketch_darkCover(progress2, 1);
        informationBar.sketch();
        progress2 -= 50;
        if(progress2 <= 5)
            set_situation("turnOnScreen");
         
    }
    
    public void sketch_turnOnScreen(){
        sketch_wallpaper("original");
        informationBar.sketch();
        print_turnOnScreen_information();
    }
    
    public void sketch_to_keypadScreen(){
        sketch_wallpaper("scoured");
        sketch_darkCover(progress2, 1);
        informationBar.sketch();
        progress2 += 30;
        if(progress2 >= 150)
            set_situation("keypadScreen");
    }
    
    public void sketch_keypadScreen(){
        sketch_wallpaper("scoured");
        sketch_darkCover(progress2, 1);
        informationBar.sketch();
        iphone.keypad.sketch();
    }
    
    public void sketch_to_wallpaperScreen(){
        sketch_wallpaper("original");
        sketch_darkCover(20, 0.88);
        sketch_darkCover(progress2, 1);
        informationBar.sketch();
        progress2 -= 30;
        if(progress2 <= 1)
            set_situation("wallpaperScreen");
    }
    
    public void sketch_wallpaperScreen(){
        sketch_wallpaper("original");
        informationBar.sketch();
        content.sketch();
        sketch_cover();
    }
    
    public void sketch_wallpaper(String mode){
        
        switch(mode){
        
        case "original":
            image(wallpaper, x, y, w, h);
            break;
        case "scoured":
            image(wallpaper_scoured, x, y, w, h);
            break;
        }
    }
    
    void sketch_darkCover(float transparency, float range){
        color c = color(0, 0, 0, transparency);
        PALETTE.setting_pen(true, false, c, PALETTE.BLACK, 1);
        rect(x, y, w, h*range);
    }
    
      
    public void sketch_cover(){
        fill(PALETTE.BACKGROUND);
        noStroke();
        rect(0,y, iphone.device.x, h);
        rect(iphone.device.x+iphone.device.w, y, width-(iphone.device.x+w), h);
        
        fill(iphone.device.fillColor);
        rect(iphone.device.x, y, x-iphone.device.x, h);
        rect(iphone.device.x+iphone.device.w, y, -(x-iphone.device.x), h);
        
        stroke(iphone.device.strokeColor);
        strokeWeight(iphone.device.w/70);
        line(iphone.device.x, y, iphone.device.x, y+h);
        line(iphone.device.x+iphone.device.w, y, iphone.device.x+iphone.device.w, y+h);
    }
    

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////      fuction      ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public void adjust(){  // 좌표값 조정
        Device he = iphone.device;
        x = he.x+he.w/100*4;
        y = he.y+he.h/100*11;
        w = he.w/100*92;
        h = he.h/100*78;
        informationBar.adjust();
        content.adjust();
    }

    
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////       print       ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  
    void print_turnOnScreen_information()
    {
  
        int year = DAY.count_year();
        int month = DAY.count_month();
        int day = DAY.count_day();
        int hour = DAY.hour_ampm();
        int minute = DAY.count_minute();
        String minuteString = str(minute);
    
        if (minute<10)
            minuteString = "0"+minuteString;
    
        String monthString = DAY.monthString(month);
        String dayOfWeekString = DAY.dayOfWeekString(year, month, day);
    
        PALETTE.setting_pen(true, true, PALETTE.WHITE, PALETTE.BLACK, 1);
    
        textSize(w/5);
        text(hour+":"+minuteString, x+w/2, y+h/100*20);////////////////////////////////////////
    
    
        textSize(w/13);
        text(dayOfWeekString + "  " + monthString + " " + day, x+w/2, y+h/100*30);//////////////////////////////////////////
    
        textSize(w/14);
        text("홈 버튼 눌러서 잠금해제", x+w/2, y+h/100*90);
    }
    
    
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////       judge       ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  


}
